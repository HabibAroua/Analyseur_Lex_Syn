# include <stdio.h>
# include <stdlib.h>
# include <string.h>
# include <ctype.h>

class AnalyseSyn
{
//Pile d'analyse
//structure de donnée
char * TabAnalyse[18][27] = {
/* p         Dcl       Dcl'        id       :       ;       .     ,       i        c       f          h       r        l       t        n       e       d       m       o       y        (       s       u       )       x       $*/
{"pw;AH.","-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	   "-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1"},  //P
{"-1",	    "D",	"D",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	   "-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1"},  //A
{"-1",	  "vC:G;D","!",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	   "-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1"},   //D
{"-1",	   "-1",	"-1",	"wL",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	   "-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1"},   //C
{"-1",	   "-1",	"-1",	"-1",	"!",	"-1",	"-1",	",wL",	"-1",	"-1",	"-1",	   "-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1"},  //L
{"-1",	   "-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"i",	"c",	"-1",	   "-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1"},  //G
{"-1",	   "-1",	"bJd",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	   "-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1"},  //H
{"-1",	   "-1",	"-1",	"K",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"K",	    "K",	"K",	"K",	"K",	"K",	"-1",	"!",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1"},  //J
{"-1",	   "-1",	"-1",	"IM",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"IM",	   "IM",	"IM",	"IM",	"IM",	"IM",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1"},  //K
{"-1",	   "-1",	"-1",	"-1",	"-1",	";IM",	"-1",	"-1",	"-1",	"-1",	"-1",	   "-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"!",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1"},  //M
{"-1",	   "-1",	"-1",	"w:=N",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1","f O m I e I","h O o I","r(w)","l(w)",	"t(w)",	"n(w)",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1"},  //I
{"-1",	   "-1",	"-1",	"NE",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	   "-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"NE",	"NE",	"-1",	"-1",	"-1",	"-1",	"-1"},  //O
{"-1",	   "-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	   "-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"!",	"!",	"-1",	"-1",	"sN",	"-1",	"-1",	"-1",	"-1"},  //E
{"-1",	   "-1",	"-1",	"QR",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	   "-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"QR",	"QR",	"-1",	"-1",	"-1",	"-1",	"-1"},  //N
{"-1",	   "-1",	"-1",	"-1",	"-1",	"!",	"-1",	"-1",	"-1",	"-1",	"-1",	   "-1",	"-1",	"-1",	"-1",	"-1",	"!",	"!",	"!",	"!",	"-1",	"-1",	"!",	"uQ",	"!",	"-1",	"-1"},  //R
{"-1",	   "-1",	"-1",	"FT",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	   "-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"FT",	"FT",	"-1",	"-1",	"-1",	"-1",	"-1"},  //Q
{"-1",	   "-1",	"-1",	"-1",	"-1",	"!",	"-1",	"-1",	"-1",	"-1",	"-1",	   "-1",	"-1",	"-1",	"-1",	"-1",	"!",	"!",	"!",	"!",	"-1",	"-1",	"!",	"!",	"-1",	"xFT",	"-1"},  //T
{"-1",	   "-1",	"-1",	"w",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	   "-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"-1",	"y",	"(N)",	"-1",	"-1",	"-1",	"-1",	"-1"}}; //F
typedef struct node {
        char val;
        struct node *prev;
        }pile;

//Déclaration de la pile
pile *stack = NULL;
    private : char Expr[255];
    private : char lex[10];
    private : int pos = 0;

    public : int Syntaxe()
    {
        return 0;
    }

    private : bool IsTerminal(char c)
    {
         bool test=false;
         if(c == 'p' || c == 'v' || c == 'b' || c == 'w' || c == ':' || c == ';' || c == '.'  || c == ',' || c == 'i'  || c == 'c' || c == 'f'  || c == 'h' || c == 'r'  || c == 'l' || c == 't'  || c == 'n' || c == 'e'  || c == 'd' || c == 'm'  || c == 'o' || c == 'y'  || c == '(' || c == 's'  || c == 'u' || c == ')'  || c == 'x' || c == '$' ) return 1;
            test=true;
        return test;
    }



    private : void empiler(char c)
    {
     pile*nd = (pile*)malloc(sizeof(pile));
     nd->val = c; nd->prev = stack;
     stack = nd;
    }

    private : void depiler()
    {

     if(stack != NULL){
              pile *p = stack;
              stack = stack->prev;
              free(p);
     }
    }
};
